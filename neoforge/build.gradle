import net.darkhax.curseforgegradle.UploadArtifact

plugins {
    id 'com.gradleup.shadow'
    id "com.modrinth.minotaur"
    id "net.darkhax.curseforgegradle"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}
repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
    modImplementation("de.erdbeerbaerlp:dcintegration.common:$rootProject.core_version")
    forgeRuntimeLibrary("de.erdbeerbaerlp:dcintegration.common:$rootProject.core_version")
    shadowBundle("de.erdbeerbaerlp:dcintegration.common:$rootProject.core_version")

    //Dynmap-API
    modCompileOnly('com.github.webbukkit:DynmapCoreAPI:2.5')

    //Vanishmod
    modCompileOnly('maven.modrinth:vanishmod:DPEcQEss')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'

    relocate 'org.slf4j', 'dcshadow.org.slf4j'
}



remapJar {
    input.set shadowJar.archiveFile
}
modrinth{
    if (project.hasProperty('modrinth.apikey')) { // $GRADLE_USER_HOME/gradle.properties
        token = project.getProperty("modrinth.apikey") // Use an environment property!
        projectId = 'rbJ7eS5V'
        versionNumber = "${project.mod_version}-${project.minecraft_version}"
        versionName = "DiscordIntegration-NeoForge ${project.mod_version} (MC ${project.minecraft_version})"
        uploadFile = remapJar
        changelog = project.changelog
        gameVersions = ["${project.minecraft_version}"]
        loaders = ['neoforge']
        dependencies {
            optional.project "vanishmod"
            optional.project "dynmap"
            optional.project "luckperms"
        }
        versionType = project.releaseType.toUpperCase()
    }
}
task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if (project.hasProperty('curseforge.apikey')) { // $GRADLE_USER_HOME/gradle.properties
        apiToken = getProperty("curseforge.apikey")

        UploadArtifact mainFile = upload(324952, remapJar)
        mainFile.releaseType = project.releaseType.toLowerCase()
        mainFile.changelog = project.changelog
        mainFile.changelogType = 'markdown'
        mainFile.displayName = "DiscordIntegration-NeoForge ${project.mod_version} (MC ${project.minecraft_version})"
        mainFile.addModLoader("neoforge")
        mainFile.addGameVersion("${project.minecraft_version}")

        mainFile.addOptional("vanishmod")
        mainFile.addOptional("dynmapforge")
        mainFile.addOptional("luckperms")

    }
}


tasks.release.dependsOn(tasks.build, publishCurseForge, tasks.modrinth)